/**
 */
package gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.provider;

import gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.util.ResultcotracirAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ResultcotracirItemProviderAdapterFactory extends ResultcotracirAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResultcotracirItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Transaccion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransaccionItemProvider transaccionItemProvider;

	/**
	 * This creates an adapter for a {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Transaccion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransaccionAdapter() {
		if (transaccionItemProvider == null) {
			transaccionItemProvider = new TransaccionItemProvider(this);
		}

		return transaccionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Trama} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TramaItemProvider tramaItemProvider;

	/**
	 * This creates an adapter for a {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Trama}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTramaAdapter() {
		if (tramaItemProvider == null) {
			tramaItemProvider = new TramaItemProvider(this);
		}

		return tramaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Consolidado} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConsolidadoItemProvider consolidadoItemProvider;

	/**
	 * This creates an adapter for a {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Consolidado}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConsolidadoAdapter() {
		if (consolidadoItemProvider == null) {
			consolidadoItemProvider = new ConsolidadoItemProvider(this);
		}

		return consolidadoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Propietario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropietarioItemProvider propietarioItemProvider;

	/**
	 * This creates an adapter for a {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Propietario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropietarioAdapter() {
		if (propietarioItemProvider == null) {
			propietarioItemProvider = new PropietarioItemProvider(this);
		}

		return propietarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Planilla} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanillaItemProvider planillaItemProvider;

	/**
	 * This creates an adapter for a {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Planilla}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanillaAdapter() {
		if (planillaItemProvider == null) {
			planillaItemProvider = new PlanillaItemProvider(this);
		}

		return planillaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.NewClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NewClassItemProvider newClassItemProvider;

	/**
	 * This creates an adapter for a {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.NewClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNewClassAdapter() {
		if (newClassItemProvider == null) {
			newClassItemProvider = new NewClassItemProvider(this);
		}

		return newClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Detallado} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DetalladoItemProvider detalladoItemProvider;

	/**
	 * This creates an adapter for a {@link gestionmodelosconsultas.modeloconsultas.resultset.resultcotracir.Detallado}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDetalladoAdapter() {
		if (detalladoItemProvider == null) {
			detalladoItemProvider = new DetalladoItemProvider(this);
		}

		return detalladoItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (transaccionItemProvider != null) transaccionItemProvider.dispose();
		if (tramaItemProvider != null) tramaItemProvider.dispose();
		if (consolidadoItemProvider != null) consolidadoItemProvider.dispose();
		if (propietarioItemProvider != null) propietarioItemProvider.dispose();
		if (planillaItemProvider != null) planillaItemProvider.dispose();
		if (newClassItemProvider != null) newClassItemProvider.dispose();
		if (detalladoItemProvider != null) detalladoItemProvider.dispose();
	}

}
